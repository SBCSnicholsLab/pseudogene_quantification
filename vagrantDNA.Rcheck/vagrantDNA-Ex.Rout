
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "vagrantDNA"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "vagrantDNA-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('vagrantDNA')
Loading required package: lme4
Loading required package: Matrix
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("divEst")
> ### * divEst
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: divEst
> ### Title: Title
> ### Aliases: divEst
> 
> ### ** Examples
> 
> ## Download data from GitHub
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("divEst", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("hopperDF")
> ### * hopperDF
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: hopperDF
> ### Title: The grasshopper SNP dataframe
> ### Aliases: hopperDF
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(hopperDF)
> ## maybe str(hopperDF) ; plot(hopperDF) ...
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("hopperDF", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("humanDF")
> ### * humanDF
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: humanDF
> ### Title: The human SNP dataframe
> ### Aliases: humanDF
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(humanDF)
> ## maybe str(humanDF) ; plot(humanDF) ...
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("humanDF", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("parrotDF")
> ### * parrotDF
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: parrotDF
> ### Title: The parrot SNP dataframe
> ### Aliases: parrotDF
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(parrotDF)
> ## maybe str(parrotDF) ; plot(parrotDF) ...
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("parrotDF", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rainbowPlot")
> ### * rainbowPlot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rainbowPlot
> ### Title: Rainbow Plot.
> ### Aliases: rainbowPlot
> 
> ### ** Examples
> 
> ## Access one of the package's example data-sets (hopperDF, parrotDF or humanDF)
> data(hopperDF)
> ##
> ## plot and printout (by default).
> rainbowPlot(hopperDF, seed = 12345, title = "Grasshopper")
Intercept based on  200 SNP loci 
Estimate:  0.000558 
Confindence Interval:  0.000484 - 0.000644 
Mapping depth estimate:  0.000769 
Function call 
 rainbowPlot(hopperDF, seed = 12345, title = "Grasshopper")> ##
> ## plot without printing the results and store results in res1.
> res1 <- rainbowPlot(hopperDF, seed = 12345, printout = False, title = "Grasshopper")
Error in rainbowPlot(hopperDF, seed = 12345, printout = False, title = "Grasshopper") : 
  object 'False' not found
Execution halted
